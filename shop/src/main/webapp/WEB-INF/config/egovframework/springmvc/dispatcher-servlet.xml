<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:component-scan base-package="egovframework, shop">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

	<!-- 스프링 3.1 이후버전부터 적용되는 기본 핸들러어댑터 선택된 메소드를 실행(invoke) 시켜주는 핸들러어댑터 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<!-- 바인딩되는 값을 자동 형변환 -->
        <property name="webBindingInitializer">
            <bean class="egovframework.example.cmmn.web.EgovBindingInitializer"/>
        </property>
    </bean>
    
    <!-- 스프링 3.1 이후버전부터 적용되는 기본 핸들러매핑클래스 HTTP로부터 넘어오는 요청을 읽어 실행시킬 Controller-Method를 선택 --> 
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
	    <!-- 요청이 RequestMappingHandlerMapping에 의해 처리되기 전에 가로채어 지정된 작업을 수행한다  -->
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor" />
            </list>
        </property>
    </bean>
    
    
    <!-- 다국어설정 -->
    <!--LocaleResolver를 통해 DispatcherServlet이 사용자의 Locale을 알아낸다
    특정 LocaleResolver를 정의하지 않을 경우 디폴트로 AcceptHeaderLocaleResolver를 이용한다
    SessionLocaleResolver : request가 갖고 있는 session으로부터 locale 정보를 가져온다  -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
    <!-- 쿠키를 이용한 Locale 이용시 <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/> -->
    <!-- HandlerMapping에 interceptor를 등록하여 특정 locale의 요청을 가로채서 
    특정 파라미터에 넘어 온 값으로 locale을 지정할 수 있다 -->
    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <property name="paramName" value="language" />
    </bean>
	
	
	
	<!-- <mvc:annotation-driven /> -->
	<!-- 
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJackson2HttpMessageConverter"/>
            </list>
        </property>
    </bean>
    <bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
	 -->
<!-- 	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"/>
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    Turn off working out content type based on URL file extension, should fall back to looking at the Accept headers
	    <property name="favorPathExtension" value="false" />
	</bean> -->
	
    
    <!-- Responsebody의 리턴값을 json으로 변환하기 위한 messageConverter -->
    
 <!--  <bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter ">
   </bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="messageConverters">
	        <list>
	            <ref bean="jacksonMessageConverter" />
	      </list>
	    </property>
	</bean> -->
	
	
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    	<!-- 지정된 예외 이외의 경우 기본 에러페이지 지정 -->
        <property name="defaultErrorView" value="cmmn/egovError"/>
		<!-- 특정 예외가 발생했을때 이동할 특정페이지 지정 -->
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">cmmn/dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">cmmn/transactionFailure</prop>
                <prop key="egovframework.rte.fdl.cmmn.exception.EgovBizException">cmmn/egovError</prop>
                <prop key="org.springframework.security.AccessDeniedException">cmmn/egovError</prop>
            </props>
        </property>
    </bean>

	<!-- ViewResolver의 구현체로 특별한 맵핑정보 없이 view 이름을 URL로 사용
	view 이름과 실제 view 자원과의 이름이 같을 때 사용할 수 있다 -->
    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="1"
	    p:viewClass="org.springframework.web.servlet.view.JstlView"
	    p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>

    <!-- Multipart를 받기 위한 리졸버 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
		<property name="defaultEncoding" value="utf-8" />
	</bean>
	
    <!-- For Pagination Tag -->
    <bean id="imageRenderer" class="egovframework.example.cmmn.web.EgovImgPaginationRenderer"/>

    <bean id="paginationManager" class="egovframework.rte.ptl.mvc.tags.ui.pagination.DefaultPaginationManager">
        <property name="rendererType">
            <map>
                <entry key="image" value-ref="imageRenderer"/>
            </map>
        </property>
    </bean>
	<!-- /For Pagination Tag -->

    <mvc:view-controller path="/cmmn/validator.do" view-name="cmmn/validator"/>
</beans>